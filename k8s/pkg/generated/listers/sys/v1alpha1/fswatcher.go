

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "bytetrade.io/web3os/fs-lib/k8s/pkg/apis/sys/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FSWatcherLister helps list FSWatchers.
// All objects returned here must be treated as read-only.
type FSWatcherLister interface {
	// List lists all FSWatchers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FSWatcher, err error)
	// FSWatchers returns an object that can list and get FSWatchers.
	FSWatchers(namespace string) FSWatcherNamespaceLister
	FSWatcherListerExpansion
}

// fSWatcherLister implements the FSWatcherLister interface.
type fSWatcherLister struct {
	indexer cache.Indexer
}

// NewFSWatcherLister returns a new FSWatcherLister.
func NewFSWatcherLister(indexer cache.Indexer) FSWatcherLister {
	return &fSWatcherLister{indexer: indexer}
}

// List lists all FSWatchers in the indexer.
func (s *fSWatcherLister) List(selector labels.Selector) (ret []*v1alpha1.FSWatcher, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FSWatcher))
	})
	return ret, err
}

// FSWatchers returns an object that can list and get FSWatchers.
func (s *fSWatcherLister) FSWatchers(namespace string) FSWatcherNamespaceLister {
	return fSWatcherNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FSWatcherNamespaceLister helps list and get FSWatchers.
// All objects returned here must be treated as read-only.
type FSWatcherNamespaceLister interface {
	// List lists all FSWatchers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FSWatcher, err error)
	// Get retrieves the FSWatcher from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FSWatcher, error)
	FSWatcherNamespaceListerExpansion
}

// fSWatcherNamespaceLister implements the FSWatcherNamespaceLister
// interface.
type fSWatcherNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FSWatchers in the indexer for a given namespace.
func (s fSWatcherNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FSWatcher, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FSWatcher))
	})
	return ret, err
}

// Get retrieves the FSWatcher from the indexer for a given namespace and name.
func (s fSWatcherNamespaceLister) Get(name string) (*v1alpha1.FSWatcher, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fswatcher"), name)
	}
	return obj.(*v1alpha1.FSWatcher), nil
}
